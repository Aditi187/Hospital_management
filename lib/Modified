import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class AppointmentHistoryPage extends StatefulWidget {
  const AppointmentHistoryPage({Key? key}) : super(key: key);

  @override
  State<AppointmentHistoryPage> createState() => _AppointmentHistoryPageState();
}

class _AppointmentHistoryPageState extends State<AppointmentHistoryPage> {
  @override
  Widget build(BuildContext context) {
    final User? currentUser = FirebaseAuth.instance.currentUser;

    if (currentUser == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Appointment History'),
          backgroundColor: const Color.fromARGB(255, 196, 50, 89),
          foregroundColor: Colors.white,
        ),
        body: const Center(
          child: Text('Please log in to view your appointments'),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('My Appointments'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.delete_sweep),
            onPressed: () => _clearAllAppointments(context, currentUser.uid),
            tooltip: 'Clear All Data',
          ),
        ],
      ),
      body: Column(
        children: [
          // Debug info
          Container(
            padding: const EdgeInsets.all(8.0),
            color: Colors.grey[200],
            child: Text(
              'User ID: ${currentUser.uid}\nEmail: ${currentUser.email}',
              style: const TextStyle(fontSize: 12),
            ),
          ),
          // Main content
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('appointments')
                  .where('patientId', isEqualTo: currentUser.uid)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                if (snapshot.hasError) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.error, size: 64, color: Colors.red),
                        SizedBox(height: 16),
                        Text('Error: ${snapshot.error}'),
                        SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: () => Navigator.pop(context),
                          child: Text('Close'),
                        ),
                      ],
                    ),
                  );
                }

                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(
                          Icons.calendar_today,
                          size: 64,
                          color: Colors.grey,
                        ),
                        const SizedBox(height: 16),
                        const Text(
                          'No appointments found',
                          style: TextStyle(fontSize: 18, color: Colors.grey),
                        ),
                        const Text(
                          'Book your first appointment to see it here',
                          style: TextStyle(fontSize: 14, color: Colors.grey),
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton.icon(
                          onPressed: () => Navigator.pop(context),
                          icon: const Icon(Icons.arrow_back),
                          label: const Text('Go Back'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.deepPurple,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ],
                    ),
                  );
                }

                return ListView.builder(
                  padding: const EdgeInsets.all(16),
                  itemCount: snapshot.data!.docs.length,
                  itemBuilder: (context, index) {
                    final appointment = snapshot.data!.docs[index];
                    final data = appointment.data() as Map<String, dynamic>;

                    return _buildAppointmentCard(context, data, appointment.id);
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAppointmentCard(
    BuildContext context,
    Map<String, dynamic> data,
    String appointmentId,
  ) {
    final DateTime date = (data['date'] as Timestamp).toDate();
    final String status = data['status'] ?? 'pending';

    Color statusColor;
    IconData statusIcon;

    switch (status.toLowerCase()) {
      case 'confirmed':
        statusColor = Colors.green;
        statusIcon = Icons.check_circle;
        break;
      case 'cancelled':
        statusColor = Colors.red;
        statusIcon = Icons.cancel;
        break;
      case 'completed':
        statusColor = Colors.blue;
        statusIcon = Icons.done_all;
        break;
      default:
        statusColor = Colors.orange;
        statusIcon = Icons.pending;
    }

    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header with specialty and status
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Expanded(
                  child: Text(
                    data['specialty'] ?? 'General Medicine',
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.deepPurple,
                    ),
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    color: statusColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(20),
                    border: Border.all(color: statusColor),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(statusIcon, color: statusColor, size: 16),
                      const SizedBox(width: 4),
                      Text(
                        status.toUpperCase(),
                        style: TextStyle(
                          color: statusColor,
                          fontWeight: FontWeight.bold,
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),

            // Date and time
            Row(
              children: [
                Icon(Icons.calendar_today, color: Colors.grey[600], size: 20),
                const SizedBox(width: 8),
                Text(
                  '${date.day}/${date.month}/${date.year}',
                  style: const TextStyle(fontSize: 16),
                ),
                const SizedBox(width: 24),
                Icon(Icons.access_time, color: Colors.grey[600], size: 20),
                const SizedBox(width: 8),
                Text(
                  data['timeSlot'] ?? 'Time not set',
                  style: const TextStyle(fontSize: 16),
                ),
              ],
            ),
            const SizedBox(height: 12),

            // Symptoms
            if (data['symptoms'] != null &&
                data['symptoms'].toString().isNotEmpty) ...[
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(Icons.healing, color: Colors.grey[600], size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Symptoms:',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            fontSize: 14,
                          ),
                        ),
                        Text(
                          data['symptoms'],
                          style: const TextStyle(fontSize: 14),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
            ],

            // Notes
            if (data['notes'] != null &&
                data['notes'].toString().isNotEmpty) ...[
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(Icons.note, color: Colors.grey[600], size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Notes:',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            fontSize: 14,
                          ),
                        ),
                        Text(
                          data['notes'],
                          style: const TextStyle(fontSize: 14),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
            ],

            // Appointment ID
            Text(
              'Appointment ID: ${data['appointmentId'] ?? appointmentId.substring(0, 8)}',
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[600],
                fontFamily: 'monospace',
              ),
            ),

            // Action buttons
            if (status.toLowerCase() == 'pending') ...[
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton(
                    onPressed: () => _cancelAppointment(context, appointmentId),
                    style: TextButton.styleFrom(foregroundColor: Colors.red),
                    child: const Text('Cancel'),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: () =>
                        _rescheduleAppointment(context, appointmentId, data),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.deepPurple,
                      foregroundColor: Colors.white,
                    ),
                    child: const Text('Reschedule'),
                  ),
                ],
              ),
            ],

            // Feedback section for completed appointments
            if (status.toLowerCase() == 'completed') ...[
              const SizedBox(height: 16),
              _buildFeedbackSection(context, appointmentId, data),
            ],

            // Medicine Report section for confirmed and completed appointments
            if (status.toLowerCase() == 'confirmed' ||
                status.toLowerCase() == 'completed') ...[
              const SizedBox(height: 16),
              _buildMedicineReportSection(context, appointmentId, data),
            ],
          ],
        ),
      ),
    );
  }

  void _cancelAppointment(BuildContext context, String appointmentId) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Cancel Appointment'),
        content: const Text(
          'Are you sure you want to cancel this appointment?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('No'),
          ),
          TextButton(
            onPressed: () async {
              try {
                await FirebaseFirestore.instance
                    .collection('appointments')
                    .doc(appointmentId)
                    .update({'status': 'cancelled'});

                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Appointment cancelled successfully'),
                    backgroundColor: Colors.orange,
                  ),
                );
              } catch (e) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Error cancelling appointment: $e'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            child: const Text('Yes', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }

  void _rescheduleAppointment(
    BuildContext context,
    String appointmentId,
    Map<String, dynamic> data,
  ) {
    // This would open a dialog or navigate to a reschedule page
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Reschedule functionality would be implemented here'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  Widget _buildMedicineReportSection(
    BuildContext context,
    String appointmentId,
    Map<String, dynamic> data,
  ) {
    final bool hasMedicineReport = data['medicineReport'] != null;

    if (hasMedicineReport) {
      final medicineReport = data['medicineReport'] as Map<String, dynamic>;
      final List<dynamic> prescriptions = medicineReport['prescriptions'] ?? [];
      final String doctorNotes = medicineReport['doctorNotes'] ?? '';
      final String diagnosis = medicineReport['diagnosis'] ?? '';
      final DateTime reportDate =
          (medicineReport['date'] as Timestamp?)?.toDate() ?? DateTime.now();

      return Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.teal.shade50,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.teal.shade200),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.medication, color: Colors.teal.shade600, size: 20),
                const SizedBox(width: 8),
                const Text(
                  'Medicine Report',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14),
                ),
                const Spacer(),
                Text(
                  '${reportDate.day}/${reportDate.month}/${reportDate.year}',
                  style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                ),
              ],
            ),
            const SizedBox(height: 12),

            // Diagnosis
            if (diagnosis.isNotEmpty) ...[
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(
                    Icons.medical_information,
                    color: Colors.teal.shade600,
                    size: 16,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Diagnosis:',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            fontSize: 13,
                          ),
                        ),
                        Text(diagnosis, style: const TextStyle(fontSize: 13)),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
            ],

            // Prescriptions
            if (prescriptions.isNotEmpty) ...[
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(
                    Icons.local_pharmacy,
                    color: Colors.teal.shade600,
                    size: 16,
                  ),
                  const SizedBox(width: 8),
                  const Text(
                    'Prescribed Medications:',
                    style: TextStyle(fontWeight: FontWeight.w600, fontSize: 13),
                  ),
                ],
              ),
              const SizedBox(height: 4),
              ...prescriptions.map((prescription) {
                final med = prescription as Map<String, dynamic>;
                return Container(
                  margin: const EdgeInsets.only(left: 24, bottom: 6),
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(6),
                    border: Border.all(color: Colors.teal.shade100),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        med['name'] ?? 'Unknown Medicine',
                        style: const TextStyle(
                          fontWeight: FontWeight.w600,
                          fontSize: 13,
                        ),
                      ),
                      if (med['dosage'] != null) ...[
                        const SizedBox(height: 2),
                        Text(
                          'Dosage: ${med['dosage']}',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[700],
                          ),
                        ),
                      ],
                      if (med['frequency'] != null) ...[
                        const SizedBox(height: 2),
                        Text(
                          'Frequency: ${med['frequency']}',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[700],
                          ),
                        ),
                      ],
                      if (med['duration'] != null) ...[
                        const SizedBox(height: 2),
                        Text(
                          'Duration: ${med['duration']}',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[700],
                          ),
                        ),
                      ],
                      if (med['instructions'] != null) ...[
                        const SizedBox(height: 2),
                        Text(
                          'Instructions: ${med['instructions']}',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[700],
                          ),
                        ),
                      ],
                    ],
                  ),
                );
              }).toList(),
              const SizedBox(height: 8),
            ],

            // Doctor Notes
            if (doctorNotes.isNotEmpty) ...[
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(Icons.note_alt, color: Colors.teal.shade600, size: 16),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Doctor Notes:',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            fontSize: 13,
                          ),
                        ),
                        Text(doctorNotes, style: const TextStyle(fontSize: 13)),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
            ],

            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                TextButton.icon(
                  onPressed: () => _viewFullMedicineReport(
                    context,
                    appointmentId,
                    medicineReport,
                  ),
                  icon: const Icon(Icons.visibility, size: 16),
                  label: const Text('View Full Report'),
                  style: TextButton.styleFrom(
                    foregroundColor: Colors.teal,
                    padding: const EdgeInsets.symmetric(horizontal: 8),
                  ),
                ),
                const SizedBox(width: 8),
                TextButton.icon(
                  onPressed: () => _downloadMedicineReport(
                    context,
                    appointmentId,
                    medicineReport,
                    data,
                  ),
                  icon: const Icon(Icons.download, size: 16),
                  label: const Text('Download'),
                  style: TextButton.styleFrom(
                    foregroundColor: Colors.teal,
                    padding: const EdgeInsets.symmetric(horizontal: 8),
                  ),
                ),
              ],
            ),
          ],
        ),
      );
    } else {
      return Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.blue.shade50,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.blue.shade200),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.info_outline, color: Colors.blue.shade600, size: 20),
                const SizedBox(width: 8),
                const Text(
                  'Medical Records',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14),
                ),
              ],
            ),
            const SizedBox(height: 8),
            const Text(
              'Why are medical records not showing?',
              style: TextStyle(
                fontWeight: FontWeight.w600,
                fontSize: 13,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 4),
            const Text(
              '• Medical records are only available after doctor consultation\n'
              '• Records include diagnosis, prescriptions, and doctor notes\n'
              '• Use "Add Sample" to see how medical records will look',
              style: TextStyle(fontSize: 12, color: Colors.black54),
            ),
            const SizedBox(height: 12),
            Row(
              children: [
                Expanded(
                  child: Text(
                    'Status: ${data['status']?.toString().toUpperCase() ?? 'PENDING'}',
                    style: TextStyle(
                      fontSize: 12,
                      fontWeight: FontWeight.w500,
                      color: _getStatusColor(data['status'] ?? 'pending'),
                    ),
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: () =>
                      _addSampleMedicineReport(context, appointmentId, data),
                  icon: const Icon(Icons.add, size: 16),
                  label: const Text('Add Sample'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue.shade600,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 8,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      );
    }
  }

  void _viewFullMedicineReport(
    BuildContext context,
    String appointmentId,
    Map<String, dynamic> medicineReport,
  ) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        child: Container(
          width: double.maxFinite,
          height: MediaQuery.of(context).size.height * 0.8,
          child: Column(
            children: [
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.teal.shade600,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(4),
                    topRight: Radius.circular(4),
                  ),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.medication, color: Colors.white),
                    const SizedBox(width: 8),
                    const Text(
                      'Full Medicine Report',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(Icons.close, color: Colors.white),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Date and Doctor Info
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.grey.shade100,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Report Date: ${_formatDate((medicineReport['date'] as Timestamp?)?.toDate() ?? DateTime.now())}',
                              style: const TextStyle(
                                fontWeight: FontWeight.w600,
                                fontSize: 14,
                              ),
                            ),
                            if (medicineReport['doctorName'] != null) ...[
                              const SizedBox(height: 4),
                              Text(
                                'Doctor: ${medicineReport['doctorName']}',
                                style: const TextStyle(fontSize: 14),
                              ),
                            ],
                          ],
                        ),
                      ),
                      const SizedBox(height: 16),

                      // Diagnosis
                      if (medicineReport['diagnosis'] != null &&
                          medicineReport['diagnosis']
                              .toString()
                              .isNotEmpty) ...[
                        _buildReportSection(
                          'Diagnosis',
                          Icons.medical_information,
                          medicineReport['diagnosis'].toString(),
                        ),
                        const SizedBox(height: 16),
                      ],

                      // Prescriptions
                      if (medicineReport['prescriptions'] != null) ...[
                        const Row(
                          children: [
                            Icon(Icons.local_pharmacy, color: Colors.teal),
                            SizedBox(width: 8),
                            Text(
                              'Prescribed Medications',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        ...(medicineReport['prescriptions'] as List<dynamic>)
                            .map((prescription) {
                              final med = prescription as Map<String, dynamic>;
                              return Container(
                                margin: const EdgeInsets.only(bottom: 12),
                                padding: const EdgeInsets.all(12),
                                decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(8),
                                  border: Border.all(
                                    color: Colors.teal.shade200,
                                  ),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      med['name'] ?? 'Unknown Medicine',
                                      style: const TextStyle(
                                        fontWeight: FontWeight.bold,
                                        fontSize: 16,
                                      ),
                                    ),
                                    const SizedBox(height: 8),
                                    if (med['dosage'] != null)
                                      _buildMedicineDetail(
                                        'Dosage',
                                        med['dosage'],
                                      ),
                                    if (med['frequency'] != null)
                                      _buildMedicineDetail(
                                        'Frequency',
                                        med['frequency'],
                                      ),
                                    if (med['duration'] != null)
                                      _buildMedicineDetail(
                                        'Duration',
                                        med['duration'],
                                      ),
                                    if (med['instructions'] != null)
                                      _buildMedicineDetail(
                                        'Instructions',
                                        med['instructions'],
                                      ),
                                  ],
                                ),
                              );
                            })
                            .toList(),
                        const SizedBox(height: 16),
                      ],

                      // Doctor Notes
                      if (medicineReport['doctorNotes'] != null &&
                          medicineReport['doctorNotes']
                              .toString()
                              .isNotEmpty) ...[
                        _buildReportSection(
                          'Doctor Notes',
                          Icons.note_alt,
                          medicineReport['doctorNotes'].toString(),
                        ),
                      ],
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildReportSection(String title, IconData icon, String content) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(icon, color: Colors.teal),
            const SizedBox(width: 8),
            Text(
              title,
              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.grey.shade50,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.grey.shade300),
          ),
          child: Text(content, style: const TextStyle(fontSize: 14)),
        ),
      ],
    );
  }

  Widget _buildMedicineDetail(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 80,
            child: Text(
              '$label:',
              style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 14),
            ),
          ),
          Expanded(child: Text(value, style: const TextStyle(fontSize: 14))),
        ],
      ),
    );
  }

  void _downloadMedicineReport(
    BuildContext context,
    String appointmentId,
    Map<String, dynamic> medicineReport,
    Map<String, dynamic> appointmentData,
  ) {
    // In a real app, this would generate and download a PDF
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('Medicine report download started'),
        backgroundColor: Colors.teal,
        action: SnackBarAction(
          label: 'View',
          textColor: Colors.white,
          onPressed: () =>
              _viewFullMedicineReport(context, appointmentId, medicineReport),
        ),
      ),
    );
  }

  void _addSampleMedicineReport(
    BuildContext context,
    String appointmentId,
    Map<String, dynamic> appointmentData,
  ) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Add Sample Medicine Report'),
        content: const Text(
          'This will add a sample medicine report to this appointment for demonstration purposes. In a real application, this would be created by the doctor.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              try {
                final sampleReport = {
                  'date': Timestamp.now(),
                  'doctorName': appointmentData['doctorName'] ?? 'Dr. Sample',
                  'diagnosis':
                      'Mild upper respiratory infection with seasonal allergies',
                  'doctorNotes':
                      'Patient presented with symptoms of runny nose, mild cough, and sneezing. No fever or severe symptoms. Recommended rest, hydration, and medication as prescribed. Follow-up in 1 week if symptoms persist.',
                  'prescriptions': [
                    {
                      'name': 'Amoxicillin',
                      'dosage': '500mg',
                      'frequency': '3 times daily',
                      'duration': '7 days',
                      'instructions': 'Take with food to avoid stomach upset',
                    },
                    {
                      'name': 'Cetirizine',
                      'dosage': '10mg',
                      'frequency': 'Once daily',
                      'duration': '10 days',
                      'instructions': 'Take before bedtime',
                    },
                    {
                      'name': 'Dextromethorphan Syrup',
                      'dosage': '15ml',
                      'frequency': 'As needed for cough',
                      'duration': '5 days',
                      'instructions': 'Do not exceed 6 doses per day',
                    },
                  ],
                };

                await FirebaseFirestore.instance
                    .collection('appointments')
                    .doc(appointmentId)
                    .update({'medicineReport': sampleReport});

                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Sample medicine report added successfully'),
                    backgroundColor: Colors.green,
                  ),
                );
              } catch (e) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Error adding medicine report: $e'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange.shade600,
              foregroundColor: Colors.white,
            ),
            child: const Text('Add Sample Report'),
          ),
        ],
      ),
    );
  }

  static void _addSampleAppointments(
    BuildContext context,
    String userId,
  ) async {
    try {
      // Sample appointments with different statuses
      final sampleAppointments = [
        {
          'patientId': userId,
          'specialty': 'Cardiology',
          'date': Timestamp.fromDate(
            DateTime.now().add(const Duration(days: 3)),
          ),
          'timeSlot': '10:00 AM',
          'symptoms':
              'Follow-up for blood pressure monitoring and heart palpitations',
          'notes': 'Bring current medication list and recent ECG results',
          'status': 'confirmed',
          'doctorName': 'Dr. Michael Chen',
          'patientName': 'John Doe',
          'patientEmail': 'john.doe@email.com',
          'appointmentId': DateTime.now().millisecondsSinceEpoch.toString(),
          'createdAt': FieldValue.serverTimestamp(),
        },
        {
          'patientId': userId,
          'specialty': 'General Medicine',
          'date': Timestamp.fromDate(
            DateTime.now().add(const Duration(days: 10)),
          ),
          'timeSlot': '02:30 PM',
          'symptoms': 'Annual physical examination and health screening',
          'notes':
              'Fasting required for blood work - 12 hours before appointment',
          'status': 'pending',
          'doctorName': 'Dr. Emily Davis',
          'patientName': 'John Doe',
          'patientEmail': 'john.doe@email.com',
          'appointmentId': (DateTime.now().millisecondsSinceEpoch + 1)
              .toString(),
          'createdAt': FieldValue.serverTimestamp(),
        },
        {
          'patientId': userId,
          'specialty': 'Dermatology',
          'date': Timestamp.fromDate(
            DateTime.now().subtract(const Duration(days: 5)),
          ),
          'timeSlot': '11:30 AM',
          'symptoms': 'Skin examination and suspicious mole check',
          'notes': 'Family history of melanoma. Previous biopsy was benign.',
          'status': 'completed',
          'doctorName': 'Dr. Sarah Johnson',
          'patientName': 'John Doe',
          'patientEmail': 'john.doe@email.com',
          'appointmentId': (DateTime.now().millisecondsSinceEpoch + 2)
              .toString(),
          'createdAt': FieldValue.serverTimestamp(),
          // Add medical report for completed appointment
          'medicineReport': {
            'date': Timestamp.fromDate(
              DateTime.now().subtract(const Duration(days: 5)),
            ),
            'doctorName': 'Dr. Sarah Johnson',
            'diagnosis': 'Seborrheic keratosis - benign skin condition',
            'doctorNotes':
                'Patient presented with concerns about skin lesions. Physical examination revealed multiple seborrheic keratoses, which are benign. No signs of malignancy. Recommend regular skin checks and sun protection.',
            'prescriptions': [
              {
                'name': 'Hydrocortisone Cream 1%',
                'dosage': 'Apply thin layer',
                'frequency': 'Twice daily',
                'duration': '2 weeks',
                'instructions': 'Apply to affected areas only, avoid eyes',
              },
              {
                'name': 'Moisturizing Lotion',
                'dosage': 'As needed',
                'frequency': 'Daily',
                'duration': 'Ongoing',
                'instructions': 'Use unscented, hypoallergenic formula',
              },
            ],
          },
        },
        {
          'patientId': userId,
          'specialty': 'Orthopedics',
          'date': Timestamp.fromDate(
            DateTime.now().add(const Duration(days: 7)),
          ),
          'timeSlot': '09:00 AM',
          'symptoms': 'Knee pain and stiffness after morning jogs',
          'notes': 'Pain started 2 weeks ago. No swelling observed.',
          'status': 'pending',
          'patientName': 'John Doe',
          'patientEmail': 'john.doe@email.com',
          'appointmentId': (DateTime.now().millisecondsSinceEpoch + 3)
              .toString(),
          'createdAt': FieldValue.serverTimestamp(),
        },
        {
          'patientId': userId,
          'specialty': 'Neurology',
          'date': Timestamp.fromDate(
            DateTime.now().subtract(const Duration(days: 12)),
          ),
          'timeSlot': '03:00 PM',
          'symptoms': 'Frequent headaches and mild dizziness',
          'notes': 'Symptoms persisted for 3 weeks. No head trauma.',
          'status': 'cancelled',
          'patientName': 'John Doe',
          'patientEmail': 'john.doe@email.com',
          'appointmentId': (DateTime.now().millisecondsSinceEpoch + 4)
              .toString(),
          'createdAt': FieldValue.serverTimestamp(),
        },
        {
          'patientId': userId,
          'specialty': 'Pediatrics',
          'date': Timestamp.fromDate(
            DateTime.now().subtract(const Duration(days: 2)),
          ),
          'timeSlot': '04:00 PM',
          'symptoms': 'Routine pediatric check-up for child',
          'notes': 'Vaccination schedule review completed',
          'status': 'completed',
          'doctorName': 'Dr. Maria Rodriguez',
          'patientName': 'John Doe',
          'patientEmail': 'john.doe@email.com',
          'appointmentId': (DateTime.now().millisecondsSinceEpoch + 5)
              .toString(),
          'createdAt': FieldValue.serverTimestamp(),
          // Add medical report for pediatric completed appointment
          'medicineReport': {
            'date': Timestamp.fromDate(
              DateTime.now().subtract(const Duration(days: 2)),
            ),
            'doctorName': 'Dr. Maria Rodriguez',
            'diagnosis':
                'Healthy child development, minor upper respiratory symptoms',
            'doctorNotes':
                'Child is developing well within normal parameters. Mild cold symptoms noted. All vaccinations up to date. Height and weight in 75th percentile. Recommend continued regular check-ups.',
            'prescriptions': [
              {
                'name': 'Children\'s Acetaminophen',
                'dosage': '160mg',
                'frequency': 'Every 6 hours as needed',
                'duration': '3-5 days',
                'instructions':
                    'Only if fever above 100.4°F, do not exceed 5 doses per day',
              },
              {
                'name': 'Saline Nasal Drops',
                'dosage': '2-3 drops per nostril',
                'frequency': '3 times daily',
                'duration': '1 week',
                'instructions': 'Use before feeding to help with congestion',
              },
              {
                'name': 'Children\'s Multivitamin',
                'dosage': '1 tablet',
                'frequency': 'Daily with breakfast',
                'duration': 'Ongoing',
                'instructions': 'Age-appropriate chewable vitamin',
              },
            ],
          },
        },
      ];

      final batch = FirebaseFirestore.instance.batch();

      // Add appointments
      for (final appointment in sampleAppointments) {
        final docRef = FirebaseFirestore.instance
            .collection('appointments')
            .doc();
        batch.set(docRef, appointment);
      }

      await batch.commit();

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Sample appointments added successfully!'),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 3),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error adding sample appointments: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Widget _buildFeedbackSection(
    BuildContext context,
    String appointmentId,
    Map<String, dynamic> data,
  ) {
    final bool hasFeedback = data['feedback'] != null;

    if (hasFeedback) {
      final feedback = data['feedback'] as Map<String, dynamic>;
      final int rating = feedback['rating'] ?? 0;
      final String comment = feedback['comment'] ?? '';
      final DateTime feedbackDate =
          (feedback['date'] as Timestamp?)?.toDate() ?? DateTime.now();

      return Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.green.shade50,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.green.shade200),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.feedback, color: Colors.green.shade600, size: 20),
                const SizedBox(width: 8),
                const Text(
                  'Your Feedback',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14),
                ),
                const Spacer(),
                Text(
                  '${feedbackDate.day}/${feedbackDate.month}/${feedbackDate.year}',
                  style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                ),
              ],
            ),
            const SizedBox(height: 8),

            // Star rating display
            Row(
              children: [
                ...List.generate(5, (index) {
                  return Icon(
                    index < rating ? Icons.star : Icons.star_border,
                    color: Colors.amber,
                    size: 20,
                  );
                }),
                const SizedBox(width: 8),
                Text(
                  '$rating/5',
                  style: TextStyle(
                    fontWeight: FontWeight.w500,
                    color: Colors.grey[700],
                  ),
                ),
              ],
            ),

            if (comment.isNotEmpty) ...[
              const SizedBox(height: 8),
              Text(comment, style: const TextStyle(fontSize: 14)),
            ],

            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                TextButton.icon(
                  onPressed: () =>
                      _editFeedback(context, appointmentId, feedback),
                  icon: const Icon(Icons.edit, size: 16),
                  label: const Text('Edit'),
                  style: TextButton.styleFrom(
                    foregroundColor: Colors.blue,
                    padding: const EdgeInsets.symmetric(horizontal: 8),
                  ),
                ),
              ],
            ),
          ],
        ),
      );
    } else {
      return Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.blue.shade50,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.blue.shade200),
        ),
        child: Row(
          children: [
            Icon(Icons.rate_review, color: Colors.blue.shade600, size: 20),
            const SizedBox(width: 8),
            const Expanded(
              child: Text(
                'How was your appointment?',
                style: TextStyle(fontWeight: FontWeight.w500, fontSize: 14),
              ),
            ),
            ElevatedButton.icon(
              onPressed: () =>
                  _showFeedbackDialog(context, appointmentId, data),
              icon: const Icon(Icons.star, size: 16),
              label: const Text('Rate'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue.shade600,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 8,
                ),
              ),
            ),
          ],
        ),
      );
    }
  }

  void _showFeedbackDialog(
    BuildContext context,
    String appointmentId,
    Map<String, dynamic> appointmentData,
  ) {
    int selectedRating = 0;
    final commentController = TextEditingController();
    bool isSubmitting = false;

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: Row(
            children: [
              Icon(Icons.feedback, color: Colors.blue.shade600),
              const SizedBox(width: 12),
              const Text('Rate Your Experience'),
            ],
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Appointment info
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade100,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        appointmentData['specialty'] ?? 'General Medicine',
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        'Appointment on ${_formatDate((appointmentData['date'] as Timestamp).toDate())}',
                        style: TextStyle(color: Colors.grey[600], fontSize: 14),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 20),

                // Rating section
                const Text(
                  'Overall Rating',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: List.generate(5, (index) {
                    return GestureDetector(
                      onTap: () {
                        setState(() {
                          selectedRating = index + 1;
                        });
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 4),
                        child: Icon(
                          index < selectedRating
                              ? Icons.star
                              : Icons.star_border,
                          color: Colors.amber,
                          size: 40,
                        ),
                      ),
                    );
                  }),
                ),
                const SizedBox(height: 8),
                Center(
                  child: Text(
                    _getRatingText(selectedRating),
                    style: TextStyle(
                      color: _getRatingColor(selectedRating),
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
                const SizedBox(height: 20),

                // Comment section
                const Text(
                  'Additional Comments (Optional)',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 8),
                TextField(
                  controller: commentController,
                  maxLines: 4,
                  decoration: const InputDecoration(
                    hintText:
                        'Share your experience, suggestions, or any concerns...',
                    border: OutlineInputBorder(),
                    contentPadding: EdgeInsets.all(12),
                  ),
                ),
                const SizedBox(height: 16),

                // Quick feedback options
                const Text(
                  'Quick Feedback',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  runSpacing: 8,
                  children: [
                    _buildQuickFeedbackChip(
                      'Professional Staff',
                      Icons.people,
                      () => _addQuickFeedback(
                        commentController,
                        'Professional and courteous staff',
                      ),
                    ),
                    _buildQuickFeedbackChip(
                      'On Time',
                      Icons.schedule,
                      () => _addQuickFeedback(
                        commentController,
                        'Appointment was on time',
                      ),
                    ),
                    _buildQuickFeedbackChip(
                      'Clean Facility',
                      Icons.cleaning_services,
                      () => _addQuickFeedback(
                        commentController,
                        'Clean and well-maintained facility',
                      ),
                    ),
                    _buildQuickFeedbackChip(
                      'Thorough Examination',
                      Icons.medical_services,
                      () => _addQuickFeedback(
                        commentController,
                        'Thorough and comprehensive examination',
                      ),
                    ),
                    _buildQuickFeedbackChip(
                      'Clear Explanation',
                      Icons.chat,
                      () => _addQuickFeedback(
                        commentController,
                        'Doctor provided clear explanations',
                      ),
                    ),
                    _buildQuickFeedbackChip(
                      'Easy Booking',
                      Icons.calendar_month,
                      () => _addQuickFeedback(
                        commentController,
                        'Easy appointment booking process',
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: isSubmitting ? null : () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: isSubmitting || selectedRating == 0
                  ? null
                  : () async {
                      setState(() {
                        isSubmitting = true;
                      });
                      await _submitFeedback(
                        context,
                        appointmentId,
                        selectedRating,
                        commentController.text.trim(),
                        appointmentData,
                      );
                    },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue.shade600,
                foregroundColor: Colors.white,
              ),
              child: isSubmitting
                  ? const SizedBox(
                      width: 16,
                      height: 16,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  : const Text('Submit Feedback'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuickFeedbackChip(
    String label,
    IconData icon,
    VoidCallback onTap,
  ) {
    return InkWell(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: Colors.blue.shade50,
          borderRadius: BorderRadius.circular(20),
          border: Border.all(color: Colors.blue.shade200),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: Colors.blue.shade600),
            const SizedBox(width: 6),
            Text(
              label,
              style: TextStyle(
                fontSize: 12,
                color: Colors.blue.shade600,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _addQuickFeedback(TextEditingController controller, String feedback) {
    final currentText = controller.text;
    final newText = currentText.isEmpty
        ? feedback
        : currentText.endsWith('.') ||
              currentText.endsWith('!') ||
              currentText.endsWith('?')
        ? '$currentText $feedback'
        : '$currentText. $feedback';
    controller.text = newText;
  }

  String _getRatingText(int rating) {
    switch (rating) {
      case 1:
        return 'Poor';
      case 2:
        return 'Fair';
      case 3:
        return 'Good';
      case 4:
        return 'Very Good';
      case 5:
        return 'Excellent';
      default:
        return 'Select a rating';
    }
  }

  Color _getRatingColor(int rating) {
    switch (rating) {
      case 1:
        return Colors.red;
      case 2:
        return Colors.orange;
      case 3:
        return Colors.yellow.shade700;
      case 4:
        return Colors.lightGreen;
      case 5:
        return Colors.green;
      default:
        return Colors.grey;
    }
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  Future<void> _submitFeedback(
    BuildContext context,
    String appointmentId,
    int rating,
    String comment,
    Map<String, dynamic> appointmentData,
  ) async {
    try {
      final feedbackData = {
        'rating': rating,
        'comment': comment,
        'date': FieldValue.serverTimestamp(),
        'patientId': FirebaseAuth.instance.currentUser?.uid,
        'specialty': appointmentData['specialty'],
        'appointmentDate': appointmentData['date'],
      };

      // Update appointment with feedback
      await FirebaseFirestore.instance
          .collection('appointments')
          .doc(appointmentId)
          .update({'feedback': feedbackData});

      // Also save to a separate feedback collection for analytics
      await FirebaseFirestore.instance.collection('feedback').add({
        ...feedbackData,
        'appointmentId': appointmentId,
        'submittedAt': FieldValue.serverTimestamp(),
      });

      Navigator.pop(context);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.check_circle, color: Colors.white),
              const SizedBox(width: 8),
              Text(
                'Thank you for your ${_getRatingText(rating).toLowerCase()} feedback!',
              ),
            ],
          ),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 3),
        ),
      );
    } catch (e) {
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error submitting feedback: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _editFeedback(
    BuildContext context,
    String appointmentId,
    Map<String, dynamic> existingFeedback,
  ) {
    int selectedRating = existingFeedback['rating'] ?? 0;
    final commentController = TextEditingController(
      text: existingFeedback['comment'] ?? '',
    );
    bool isSubmitting = false;

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: Row(
            children: [
              Icon(Icons.edit, color: Colors.blue.shade600),
              const SizedBox(width: 12),
              const Text('Edit Your Feedback'),
            ],
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Rating section
                const Text(
                  'Overall Rating',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: List.generate(5, (index) {
                    return GestureDetector(
                      onTap: () {
                        setState(() {
                          selectedRating = index + 1;
                        });
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 4),
                        child: Icon(
                          index < selectedRating
                              ? Icons.star
                              : Icons.star_border,
                          color: Colors.amber,
                          size: 40,
                        ),
                      ),
                    );
                  }),
                ),
                const SizedBox(height: 8),
                Center(
                  child: Text(
                    _getRatingText(selectedRating),
                    style: TextStyle(
                      color: _getRatingColor(selectedRating),
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
                const SizedBox(height: 20),

                // Comment section
                const Text(
                  'Comments',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 8),
                TextField(
                  controller: commentController,
                  maxLines: 4,
                  decoration: const InputDecoration(
                    hintText: 'Update your feedback...',
                    border: OutlineInputBorder(),
                    contentPadding: EdgeInsets.all(12),
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: isSubmitting ? null : () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: isSubmitting
                  ? null
                  : () => _deleteFeedback(context, appointmentId),
              style: TextButton.styleFrom(foregroundColor: Colors.red),
              child: const Text('Delete'),
            ),
            ElevatedButton(
              onPressed: isSubmitting || selectedRating == 0
                  ? null
                  : () async {
                      setState(() {
                        isSubmitting = true;
                      });
                      await _updateFeedback(
                        context,
                        appointmentId,
                        selectedRating,
                        commentController.text.trim(),
                      );
                    },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue.shade600,
                foregroundColor: Colors.white,
              ),
              child: isSubmitting
                  ? const SizedBox(
                      width: 16,
                      height: 16,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  : const Text('Update'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _updateFeedback(
    BuildContext context,
    String appointmentId,
    int rating,
    String comment,
  ) async {
    try {
      final feedbackData = {
        'rating': rating,
        'comment': comment,
        'date': FieldValue.serverTimestamp(),
        'updated': true,
      };

      await FirebaseFirestore.instance
          .collection('appointments')
          .doc(appointmentId)
          .update({'feedback': feedbackData});

      Navigator.pop(context);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Row(
            children: [
              Icon(Icons.check_circle, color: Colors.white),
              SizedBox(width: 8),
              Text('Feedback updated successfully!'),
            ],
          ),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error updating feedback: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _deleteFeedback(BuildContext context, String appointmentId) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Feedback'),
        content: const Text(
          'Are you sure you want to delete your feedback? This action cannot be undone.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () async {
              try {
                await FirebaseFirestore.instance
                    .collection('appointments')
                    .doc(appointmentId)
                    .update({'feedback': FieldValue.delete()});

                Navigator.pop(context); // Close delete dialog
                Navigator.pop(context); // Close edit dialog

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Feedback deleted successfully'),
                    backgroundColor: Colors.orange,
                  ),
                );
              } catch (e) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Error deleting feedback: $e'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }

  // Helper method to get status color
  Color _getStatusColor(String status) {
    switch (status.toLowerCase()) {
      case 'confirmed':
        return Colors.green;
      case 'completed':
        return Colors.blue;
      case 'cancelled':
        return Colors.red;
      case 'pending':
      default:
        return Colors.orange;
    }
  }

  // Method to clear all appointments
  void _clearAllAppointments(BuildContext context, String userId) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Clear All Appointments'),
        content: const Text(
          'This will permanently delete all your appointment data including medical records and feedback. This action cannot be undone.\n\nAre you sure you want to continue?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              try {
                Navigator.pop(context);

                // Show loading indicator
                showDialog(
                  context: context,
                  barrierDismissible: false,
                  builder: (context) => const AlertDialog(
                    content: Row(
                      children: [
                        CircularProgressIndicator(),
                        SizedBox(width: 16),
                        Text('Clearing all data...'),
                      ],
                    ),
                  ),
                );

                // Delete all appointments for this user
                final batch = FirebaseFirestore.instance.batch();
                final appointmentsQuery = await FirebaseFirestore.instance
                    .collection('appointments')
                    .where('patientId', isEqualTo: userId)
                    .get();

                for (final doc in appointmentsQuery.docs) {
                  batch.delete(doc.reference);
                }

                // Delete all feedback for this user
                final feedbackQuery = await FirebaseFirestore.instance
                    .collection('feedback')
                    .where('patientId', isEqualTo: userId)
                    .get();

                for (final doc in feedbackQuery.docs) {
                  batch.delete(doc.reference);
                }

                await batch.commit();

                Navigator.pop(context); // Close loading dialog

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('All appointment data cleared successfully!'),
                    backgroundColor: Colors.green,
                  ),
                );
              } catch (e) {
                Navigator.pop(context); // Close loading dialog
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Error clearing data: $e'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: const Text('Clear All Data'),
          ),
        ],
      ),
    );
  }
}
